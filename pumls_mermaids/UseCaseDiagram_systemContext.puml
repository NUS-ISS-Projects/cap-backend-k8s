@startuml
!theme plain
skinparam actorStyle awesome
skinparam roundcorner 20
skinparam shadowing true
skinparam defaultFontName "Inter"
skinparam defaultFontSize 13
skinparam Linetype ortho

skinparam package {
  borderColor #A8A8A8
  backgroundColor #F5F5F5
}
skinparam component {
  borderColor #0078D4
  backgroundColor #E6F3FF
  fontColor #003C6B
}
skinparam cloud {
  borderColor #0F9D58
  backgroundColor #E6F9EE
}
skinparam database {
  borderColor #DB4437
  backgroundColor #FCE8E6
}
skinparam queue {
  borderColor #795548
  backgroundColor #EFEBE9
}
skinparam node {
  borderColor #666666
  backgroundColor #D3D3D3
}

' Actors
actor "Client / UI" as UI
actor "DIS PDU Emitter\n(e.g., sendPdu.py)" as DIS_Source

' Main System Boundary
cloud "Google Kubernetes Engine (GKE) Cluster" {

    ' Ingress is the main entry point for HTTP traffic
    node "GKE Ingress & NodePort" as ingress

    ' Define the core microservices (Deployments)
    package "Microservices" {
      component "Data Ingestion Service" as ingestion {
        note bottom
          Receives UDP PDUs.
          Publishes JSON to Kafka.
          Exposes /internal/metrics/realtime.
        end note
      }
      component "Data Processing Service" as processing {
        note bottom
          Consumes from Kafka.
          Parses JSON PDUs.
          Saves to PostgreSQL.
        end note
      }
      component "Data Acquisition Service" as acquisition {
        note bottom
          Serves historical & aggregated data from DB.
          Fetches real-time metrics from Ingestion Svc.
        end note
      }
    }

    ' Define the backend stateful services
    package "Backend Services" {
      queue "Apache Kafka\n(Topic: dis-pdus)" as kafka
      database "PostgreSQL\n(DB: dis_db)" as postgres
      component "Zookeeper" as zookeeper
    }
}

' --- Relationships ---

' --- External User Data Flow ---
UI -down-> ingress : HTTPS REST Calls\n(/api/acquisition/*)

' --- UDP Ingestion Flow ---
DIS_Source -down-> ingress : DIS PDUs via UDP\n(NodePort 32000 -> Port 3000)

' --- Ingress Routing ---
ingress --> acquisition : /api/acquisition/* 
ingress --> ingestion : /api/ingestion/health 
ingress --> processing : /api/processing/health 

' --- Internal Data Pipeline ---
ingestion -> kafka : 1. Publish (PDU as JSON) 
processing <- kafka : 2. Consume (PDU as JSON) 
processing -> postgres : 3. Store (Structured Records) 
acquisition -> postgres : 4. Query (Historical/Aggregated Data) 

' --- Internal Service-to-Service Communication ---
acquisition ..> ingestion : HTTP GET /internal/metrics/realtime 

' --- Backend Service Coordination ---
kafka -> zookeeper : Coordination 

@enduml